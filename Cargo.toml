[package]
name = "renode-run"
version = "0.1.0"
edition = "2021"
license = "MIT OR Apache-2.0"
description = "Run embedded programs in the renode emulator"
categories = ["command-line-utilities", "embedded", "no-std"]
keywords = ["cargo-runner", "renode"]
authors = ["Jon Lamb"]
repository = "https://github.com/jonlamb-gh/renode-run"

[dependencies]
log = "0.4"
env_logger = "0.10"
cargo_metadata = "0.15"
cargo_toml = "0.15"
serde = { version = "1.0", features = ["derive"] }
clap = { version = "4.1", features = ["derive", "env", "color"] }
regex = "1.7"
lazy_static = "1.4"
unindent = "0.2"
indent = "0.1"
tempfile = "3.4"
thiserror = "1.0"
derive_more = "0.99"

# TESTING
[package.metadata.renode]
# Defaults to ...
# maybe script-name/script-description
name = 'my-script'
description = 'my renode script - ${FOOKEY} works'
machine-name = 'my-machine'
using-sysbus = true
renode = '${HOME}/repos/forks/renode/renode'

environment-variables = [
    ['FOOKEY', 'FOOVAL'],
    ["MYENV", "MYVAL"],
]

# maybe setup-expressions/commands?
init-commands = [
    'logLevel -1 i2c2',
]

# 'bin' var is automatically handled/available `$bin = input-bin-from-cargo...`
# TODO insert auto bin first or last or ?? to surface user-usage-of-bin errors
variables = [
    '$tap?="renode-tap0"',
    # Set random board UNIQUE ID
    '''
    python "import _random"
    python "rand = _random.Random()"

    $id1 = `python "print rand.getrandbits(32)"`
    $id2 = `python "print rand.getrandbits(32)"`
    $id3 = `python "print rand.getrandbits(32)"`
    ''',
]


# supports envsub
# 'bin' var is automatically handled/available
# vars = ['mytap ?= "renode-tap0"', ...]
# maybe more structured [ ['foovar', 'fooval'], ... ]
# $id1 = `python "print rand.getrandbits(32)"`

# TODO provide some env vars too, like RENODE_MACHINE_NAME based on config
# env vars just a list of vars or var=vals or ...?
# env = [...]

# Defaults to false, all generate includes/paths are absolute
# paths that start with '@' are left as is, assume they're renode-relative
#use-relative-paths = false

# we have to test/infer local-path or string, or add some flagging with nested array of strings
# do common env vars for default envsub on paths/etc
# local/relative files could be ran through envsub and written to tmpdir alongside the resc
# to support env vars
platform-descriptions = [
    '@platforms/boards/stm32f4_discovery-kit.repl',
    '@/tmp/dev_board.repl', # TODO can use envsub here too
    '''
    phy3: Network.EthernetPhysicalLayer @ ethernet 3
        Id1: 0x0000
        Id2: 0x0000
    ''',
    '''
    wss: Python.PythonPeripheral @ sysbus 0x50070000
        size: 0x10
        initable: true
        filename: "$ORIGIN/sensor_models/wss.py"
    ''',
]

# indendation is significant in the repl stuff...
# Could do an array instead..
# platform-descriptions = ['path OR string', 'path OR string', ... ]
#    [[package.metadata.renode.platform-description]]
#    path = 'path/to/my/stuff.repl'
    # mut excl with path
#    string = 'stuff we feed to LoadPlatformDescriptionFromString here'

# some early and late stage arbitrary script stuff
# pre-start-commands = [...]

# maybe expressions?
pre-start-commands = [
    '''
    emulation CreateSwitch "switch"
    connector Connect sysbus.ethernet switch
    emulation CreateTap $tap "tap"
    connector Connect host.tap switch
    ''',
    'emulation LogEthernetTraffic',
    'machine StartGdbServer 3333',
]

# default is 'sysbus LoadELF $bin'
reset = '''
sysbus LoadELF $bin
sysbus WriteDoubleWord 0x1FFF7A10 $id1
sysbus WriteDoubleWord 0x1FFF7A14 $id2
sysbus WriteDoubleWord 0x1FFF7A18 $id3
'''
